rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImageType() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function isValidVideoType() {
      return request.resource.contentType.matches('video/.*');
    }
    
    function isValidAudioType() {
      return request.resource.contentType.matches('audio/.*');
    }
    
    function isValidFileSize() {
      // Max 100MB for videos, 10MB for images, 50MB for audio
      return (isValidVideoType() && request.resource.size < 100 * 1024 * 1024) ||
             (isValidImageType() && request.resource.size < 10 * 1024 * 1024) ||
             (isValidAudioType() && request.resource.size < 50 * 1024 * 1024) ||
             request.resource.size < 20 * 1024 * 1024; // Default 20MB for other files
    }
    
    // User uploads - organized by userId
    match /users/{userId}/assets/{assetId}/{allPaths=**} {
      allow read: if true; // Public read for now, can be restricted based on asset visibility
      allow write: if isOwner(userId) && isValidFileSize();
    }
    
    // Thumbnails
    match /users/{userId}/thumbnails/{thumbnailId} {
      allow read: if true;
      allow write: if isOwner(userId);
    }
    
    // User avatars
    match /users/{userId}/avatar {
      allow read: if true;
      allow write: if isOwner(userId) && isValidImageType() && request.resource.size < 2 * 1024 * 1024;
    }
    
    // Temporary uploads
    match /temp/{userId}/{fileName} {
      allow read, write: if isOwner(userId) && isValidFileSize();
      allow delete: if isOwner(userId);
    }
  }
}